Min Steps To One
Send Feedback
Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - ­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Write brute-force recursive solution for this.
Input format :
The first and the only line of input contains an integer value, 'n'.
Output format :
Print the minimum number of steps.
Constraints :
1 <= n <= 200

Time Limit: 1 sec
Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 
Sample Input 2 :
7
Sample Output 2 :
3
Explanation of Sample Output 2 :
For n = 7
Step 1 :  n = 7 ­- 1 = 6
Step 2 : n = 6  / 3 = 2 
Step 3 : n = 2 / 2 = 1  



///////////////////////////// main code

import java.util.*;
public class Solution {
    static int count=0;
	public static int countMinStepsToOne(int n) {
		//Your code goes here
        if(n==1)
        {  // System.out.println(count);
            return 0;
        }
        int ans1=Integer.MAX_VALUE;
        int ans2=Integer.MAX_VALUE;
        int ans3=Integer.MAX_VALUE;
        
        int dp[] = new int[n+1];
        dp[0]=0;
        dp[1]=1;
        dp[2]=1;
        dp[3]=1;
        
        
        for(int i=4; i<=n;i++)
        {
             ans1=Integer.MAX_VALUE;
             ans2=Integer.MAX_VALUE;
            ans3=Integer.MAX_VALUE;
            ans3=dp[i-1];
            if(i%2==0)
            {
                ans2=dp[i/2];
            }
             if(i%3==0)
            {
                ans1=dp[i/3];
            }
            
            dp[i]=Math.min(ans3,Math.min(ans2,ans1))+1; // this +1 is for no. itself
          //  System.out.println(i);
            
        }
        
        
      return dp[n];
    
        
	}

}



